/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */

import { rest } from 'mswx';
import { rest as restx } from 'mswx';
import { faker } from '@faker-js/faker';
import { schemas, type Event } from '../api/api.client';
import { generateMock } from '@anatine/zod-mock';

faker.seed(1);

const baseURL = import.meta.env.VITE_API_PREFIX;
const MAX_ARRAY_LENGTH = 20;

interface Nexts {
	[key: string]: number;
}
const nexts: Nexts = {};
let nextValue = 0;

const NextMiddleware = restx.middleware((req, res, ctx, next) => {
	const { pathname } = req.url;
	if (!nexts[pathname]) {
		nexts[pathname] = 0;
	}
	nextValue = nexts[pathname]++;
	return next();
});

rest.config.API_PREFIX = baseURL;
export const handlers = [
	rest.get(`/events`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getGetAllEvents200Response())],
			[ctx.status(500), ctx.json(getGetAllEvents500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.post(`/events`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getCreateEvent200Response())],
			[ctx.status(400), ctx.json(getCreateEvent400Response())],
			[ctx.status(500), ctx.json(getCreateEvent500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.get(`/events/:eventId`, (req, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getGetEvent200Response())],
			[ctx.status(404), ctx.json(getGetEvent404Response())],
			[ctx.status(500), ctx.json(getGetEvent500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.patch(`/events/:eventId`, (req, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getUpdateEvent200Response())],
			[ctx.status(400), ctx.json(getUpdateEvent400Response())],
			[ctx.status(404), ctx.json(getUpdateEvent404Response())],
			[ctx.status(500), ctx.json(getUpdateEvent500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.delete(`/events/:eventId`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getDeleteEvent200Response())],
			[ctx.status(404), ctx.json(getDeleteEvent404Response())],
			[ctx.status(500), ctx.json(getDeleteEvent500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.put(`/events/:eventId/join`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getJoinEvent200Response())],
			[ctx.status(404), ctx.json(getJoinEvent404Response())],
			[ctx.status(500), ctx.json(getJoinEvent500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.post(`/events/:eventId/leave`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getLeaveEvent200Response())],
			[ctx.status(404), ctx.json(getLeaveEvent404Response())],
			[ctx.status(500), ctx.json(getLeaveEvent500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.get(`/events/:eventId/msgs`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getGetEventMsgs200Response())],
			[ctx.status(404), ctx.json(getGetEventMsgs404Response())],
			[ctx.status(500), ctx.json(getGetEventMsgs500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.post(`/events/:eventId/msgs`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getCreateEventMsg200Response())],
			[ctx.status(400), ctx.json(getCreateEventMsg400Response())],
			[ctx.status(404), ctx.json(getCreateEventMsg404Response())],
			[ctx.status(500), ctx.json(getCreateEventMsg500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.get(`/categories`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getGetCategories200Response())],
			[ctx.status(500), ctx.json(getGetCategories500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.post(`/login`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getLogin200Response())],
			[ctx.status(500), ctx.json(getLogin500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.post(`/logout`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(null)],
			[ctx.status(500), ctx.json(getLogout500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.get(`/users/:userId`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getGetUserInfo200Response())],
			[ctx.status(404), ctx.json(getGetUserInfo404Response())],
			[ctx.status(500), ctx.json(getGetUserInfo500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.patch(`/users/:userId`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getUpdateUserInfo200Response())],
			[ctx.status(400), ctx.json(getUpdateUserInfo400Response())],
			[ctx.status(403), ctx.json(getUpdateUserInfo403Response())],
			[ctx.status(404), ctx.json(getUpdateUserInfo404Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	}),
	rest.get(`/users/:userId/events`, (_, res, ctx) => {
		const resultArray = [
			[ctx.status(200), ctx.json(getGetUserEvents200Response())],
			[ctx.status(404), ctx.json(getGetUserEvents404Response())],
			[ctx.status(500), ctx.json(getGetUserEvents500Response())]
		];

		return res(...resultArray[nextValue % resultArray.length]);
	})
].map(NextMiddleware);

export function getGetAllEvents200Response() {
	return new Array(10).fill(0).map(() => generateMock(schemas.Event));
}

export function getGetAllEvents500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getCreateEvent200Response() {
	return generateMock(schemas.Event);
}

export function getCreateEvent400Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getCreateEvent500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetEvent200Response() {
	return generateMock(schemas.Event);
}

export function getGetEvent404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetEvent500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getUpdateEvent200Response() {
	return generateMock(schemas.Event);
}

export function getUpdateEvent400Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getUpdateEvent404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getUpdateEvent500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getDeleteEvent200Response() {
	return {
		message: 'success',
		message_code: 'message_code'
	};
}

export function getDeleteEvent404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getDeleteEvent500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getJoinEvent200Response() {
	return {
		id: faker.datatype.uuid(),
		name: '團購名稱',
		description: '團購描述',
		category: '團購類別',
		start_time: '1680153135',
		end_time: '1680153140',
		min_amount: '2',
		max_amount: '2',
		members: [...new Array(faker.datatype.number({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
			(_) => null
		)
	};
}

export function getJoinEvent404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getJoinEvent500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getLeaveEvent200Response() {
	return {
		message: 'success',
		message_code: 'message_code'
	};
}

export function getLeaveEvent404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getLeaveEvent500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetEventMsgs200Response() {
	return new Array(Math.floor(Math.random() * 10))
		.fill(0)
		.map(() => generateMock(schemas.EventMsg));
}

export function getGetEventMsgs404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetEventMsgs500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getCreateEventMsg200Response() {
	return generateMock(schemas.EventMsg);
}

export function getCreateEventMsg400Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getCreateEventMsg404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getCreateEventMsg500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetCategories200Response() {
	return [...new Array(faker.datatype.number({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) =>
		faker.lorem.slug(1)
	);
}

export function getGetCategories500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getLogin200Response() {
	return null;
}

export function getLogin500Response() {
	return null;
}

export function getLogout500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetUserInfo200Response() {
	return {
		id: faker.datatype.uuid(),
		avatar: faker.lorem.slug(1),
		name: faker.name.fullName(),
		email: faker.internet.email(),
		phone: faker.lorem.slug(1)
	};
}

export function getGetUserInfo404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetUserInfo500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getUpdateUserInfo200Response() {
	return {
		id: faker.datatype.uuid(),
		avatar: faker.lorem.slug(1),
		name: faker.name.fullName(),
		email: faker.internet.email(),
		phone: faker.lorem.slug(1)
	};
}

export function getUpdateUserInfo400Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getUpdateUserInfo403Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getUpdateUserInfo404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetUserEvents200Response() {
	return [...new Array(faker.datatype.number({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
		(_) => ({
			id: faker.datatype.uuid(),
			name: '團購名稱',
			description: '團購描述',
			category: '團購類別',
			start_time: '1680153135',
			end_time: '1680153140',
			min_amount: '2',
			max_amount: '2',
			members: [...new Array(faker.datatype.number({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
				(_) => null
			)
		})
	);
}

export function getGetUserEvents404Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}

export function getGetUserEvents500Response() {
	return {
		message: 'error occur',
		error_code: 'error_code'
	};
}
